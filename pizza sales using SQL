create database pizzahut;
-- retrive the total number of orders placed
select count(order_id) as total_order from orders;
-- calculate the total revenue generated from pizza sales
SELECT 
    SUM(order_details.quantity * pizzas.price) AS total_sales
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id;
    
    -- identify highest-priced pizza
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
order by pizzas.price desc limit 1;

-- identify most common pizza size ordered

select quantity,count(order_details_id) from order_details group by quantity;
SELECT 
    pizzas.size,
    COUNT(order_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC;

-- List the top 5 most ordered pizza types along with there quantities.
SELECT 
    pizza_types.name,SUM(order_details.quantity) AS top_ordered
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY top_ordered DESC limit 5;

-- join the necessary tables to find the total quantity of each pizza category ordered
SELECT 
    pizza_types.category,
    SUM(order_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY total_quantity DESC;

-- determine the distribution of orders by hour of the day
SELECT 
    HOUR(time),COUNT(order_id)
FROM
    orders
GROUP BY HOUR(time);

-- join the relevant table to find the category wise distribution of pizza
SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category;

-- Group the orders by date and calculate the average number of pizzas ordered by per day
SELECT 
    ROUND(AVG(quantity), 0) as avg_pizza_ordered
FROM
    (SELECT 
        orders.date, SUM(order_details.quantity) AS quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY orders.date) AS ordered_quantity;

-- determina the top 3 most ordered pizza types based on revenue 
SELECT 
    pizza_types.name,
    round(SUM(pizzas.price * order_details.quantity),0) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

-- calculate percentage contribution of each pizza to total revenue
SELECT 
    pizza_types.category,
   round(SUM(pizzas.price * order_details.quantity)/(SELECT 
    round(SUM(order_details.quantity * pizzas.price),2)AS total_sales
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id)*100,2) as revenue 
FROM
    pizza_types
        JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue DESC;

-- analyze the cumulative revenue generated over time
select date,
sum(revenue) over (order by date) as cum_revenue 
from  
(select orders.date,sum(order_details.quantity*pizzas.price) as revenue 
from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id
join orders on orders.order_id=order_details.order_id
group by orders.date) as sales; 
-- determine top 3 most ordered pizza types based on revenue for each pizza category

select name, revenue from 
(SELECT 
  category, 
  name, 
  revenue, 
  rank() OVER (PARTITION BY category ORDER BY revenue DESC) AS rn
FROM (
  SELECT 
    pizza_types.category, 
    pizza_types.name, 
    SUM((order_details.quantity * pizzas.price)) AS revenue
  FROM 
    pizza_types 
  JOIN 
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
  JOIN 
    order_details ON order_details.pizza_id = pizzas.pizza_id
  GROUP BY 
    pizza_types.category, 
    pizza_types.name
) AS a)as b
where rn<=3;

-- inner join pizza type id 

SELECT 
    pizza_types.pizza_type_id, pizzas.pizza_type_id,pizzas.price
FROM
    pizzas
        INNER JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id; 

SELECT 
    *
FROM
    pizza_types
        INNER JOIN
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id;

SELECT 
    *
FROM
    pizza_types
        left join
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id;
	
SELECT 
    *
FROM
    pizza_types
        right join
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id;

select pizza_id,avg(price) from pizzas group by pizza_id having avg(price)>15;

-- maximum pizza price
select * from pizzas where price=(select max(price) from pizzas);





























    



 
 
